"use strict";var ApplicationConfiguration=function(){var applicationModuleName="pomodoro",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("tasks"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider","$locationProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",views:{"":{templateUrl:"modules/core/views/home.client.view.html",controller:"HomeController"},"taskList@home":{templateUrl:"modules/core/views/tasklist.client.view.html",controller:"TaskListController"}}}).state("shortbreak",{url:"/shortbreak",controller:"ShortBreakController",templateUrl:"modules/core/views/shortbreak.client.view.html"}).state("longbreak",{url:"/longbreak",controller:"LongBreakController",templateUrl:"modules/core/views/longbreak.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$interval","timer","Authentication",function($scope,$interval,timer,Authentication){$scope.authentication=Authentication,$scope.authenticated=""!==Authentication.user;var initialTime=15e5;$scope.currentTime=initialTime,$scope.startTimer=function(){timer.start($scope)},$scope.stopTimer=function(){timer.stop($scope)},$scope.resetTimer=function(){timer.reset($scope,initialTime)},$scope.shortBreakMessage=function(){return timer.pomodoroDone&&timer.pomodoroCount%3!==0},$scope.longBreakMessage=function(){return 0!==timer.pomodoroCount&&timer.pomodoroCount%3===0}}]),angular.module("core").controller("LongBreakController",["$scope","$interval","timer",function($scope,$interval,timer){var initialTime=18e5;$scope.currentTime=initialTime,$scope.startTimer=function(){timer.start($scope)},$scope.stopTimer=function(){timer.stop($scope)},$scope.resetTimer=function(){timer.reset($scope,initialTime)}}]),angular.module("core").controller("ShortBreakController",["$scope","$interval","timer",function($scope,$interval,timer){var initialTime=3e5;$scope.currentTime=initialTime,$scope.startTimer=function(){timer.start($scope)},$scope.stopTimer=function(){timer.stop($scope)},$scope.resetTimer=function(){timer.reset($scope,initialTime)},$scope.returnToWorkMessage=function(){return!0}}]),angular.module("core").controller("TaskListController",["$scope","$stateParams","$location","Tasks","timer",function($scope,$stateParams,$location,Tasks){var taskCount=1;$scope.taskLimitReached=function(){return taskCount>10},$scope.taskHover=!1,$scope.addTask=function(){var task=new Tasks({name:this.name,taskComplete:this.taskComplete});console.log($scope.tasks);var saved=task.$save(function(){$scope.name="",$scope.taskComplete=""},function(errorResponse){$scope.error=errorResponse.data.message});saved.then(function(){$scope.find()}),$scope.adding=!1},$scope.deleteTask=function(task){if(task){task.$remove(),$scope.editing=!1;for(var i in $scope.tasks)$scope.tasks[i]===task&&$scope.tasks.splice(i,1)}else $scope.task.$remove()},$scope.updateTask=function(){var task=taskBeingEdited;task.name=this.name,task.taskComplete=this.taskComplete,task.$update(function(){$scope.name="",$scope.taskComplete=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tasks=Tasks.query()},$scope.findOne=function(){$scope.task=Tasks.get({taskId:$stateParams.taskId})};var taskBeingEdited;$scope.editTask=function(task){$scope.editing=!0,$scope.name=task.name,$scope.taskComplete=task.taskComplete,taskBeingEdited=task},$scope.cancelEditing=function(){$scope.editing=!1,$scope.adding=!1,$scope.name="",$scope.taskComplete="",taskBeingEdited=void 0},$scope.addingNewTask=function(){$scope.adding=!0},$scope.completeTask=function(task){task.taskComplete=!0,console.log($scope.tasks)},$scope.undoCompleteTask=function(task){task.taskComplete=!1},$scope.cleanCompleted=function(){for(var i in $scope.tasks)$scope.tasks[i].taskComplete===!0&&($scope.tasks.splice($scope.tasks[i],1),$scope.tasks[i].$remove())}}]),angular.module("core").filter("timecode",[function(){return function(milliSeconds){var totalSeconds=milliSeconds/1e3,outputSeconds=totalSeconds%60,outputMinutes=Math.floor(totalSeconds/60);return 10>outputSeconds?outputMinutes+":0"+outputSeconds:outputMinutes+":"+outputSeconds}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").service("timer",["$interval",function($interval){return{pomodoroCount:0,pomodoroDone:!1,interval:void 0,start:function(scope){var self=this;this.interval=$interval(function(){scope.currentTime>0?scope.currentTime=scope.currentTime-1e3:(self.pomodoroDone||(self.pomodoroCount=self.pomodoroCount+1),self.pomodoroDone=!0,$interval.cancel(self.interval))},1e3)},stop:function(){$interval.cancel(this.interval)},reset:function(scope,initialTime){this.stop(),scope.currentTime=initialTime,this.pomodoroDone=!1}}}]),angular.module("tasks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTasks",{url:"/tasks",templateUrl:"modules/tasks/views/list-tasks.client.view.html"}).state("createTask",{url:"/tasks/create",templateUrl:"modules/tasks/views/create-task.client.view.html"}).state("viewTask",{url:"/tasks/:taskId",templateUrl:"modules/tasks/views/view-task.client.view.html"}).state("editTask",{url:"/tasks/:taskId/edit",templateUrl:"modules/tasks/views/edit-task.client.view.html"})}]),angular.module("tasks").controller("TasksController",["$scope","$stateParams","$location","Authentication","Tasks",function($scope,$stateParams,$location,Authentication,Tasks){$scope.authentication=Authentication,$scope.create=function(){var task=new Tasks({name:this.name});task.$save(function(response){$location.path("tasks/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(task){if(task){task.$remove();for(var i in $scope.tasks)$scope.tasks[i]===task&&$scope.tasks.splice(i,1)}else $scope.task.$remove(function(){$location.path("tasks")})},$scope.update=function(){var task=$scope.task;task.$update(function(){$location.path("tasks/"+task._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tasks=Tasks.query()},$scope.findOne=function(){$scope.task=Tasks.get({taskId:$stateParams.taskId})}}]),angular.module("tasks").factory("Tasks",["$resource",function($resource){return $resource("tasks/:taskId",{taskId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);